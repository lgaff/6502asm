An assembler for the MOS 6502 in perl.

I'm using the 6502 as a simple real world processor to explore the steps in assembler construction, with the hopes to move on to more complex architectures later on.

The lexer is implemented as a very very basic finite state machine, assessing each character in series until it finds a character that matches the beginning of a token, after which a lookahead is performed by reading up until a word boundary, and examining the sequence of characters for a final match. If a match can be made, the token and its value are pushed onto a token stack, and the process continues, gobbling any whitespace as it goes. Otherwise, the characters are added back onto the character stream, and the machine resets to the start state. If at any point a token cannot be properly matched, an error is returned.

Instruction values are stored in the hashes as strings representing the binary value. This is converted to actual binary using the pack routine.
